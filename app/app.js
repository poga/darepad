// Generated by LiveScript 1.2.0
var CryptoJS, updateAction, app;
CryptoJS = require('crypto-js');
updateAction = function(scope, name, value){
  var s, results$ = [];
  s = scope.$parent;
  while (s !== void 8) {
    if (s.hasOwnProperty('actions')) {
      console.log('updating', name, value);
      s.actions[name] = value;
      break;
    } else {
      results$.push(s = s.$parent);
    }
  }
  return results$;
};
app = angular.module('moltenpad', ['angularLocalStorage']);
app.directive('textInput', function(){
  return {
    restrict: 'E',
    scope: {
      v: '=for',
      placeholder: '@',
      actionItemId: '@for'
    },
    templateUrl: 'partials/checkbox.html',
    controller: function($scope, $rootScope){
      return $rootScope.registerAction($scope.actionItemId);
    }
  };
});
app.directive('checkbox', function(){
  return {
    restrict: 'E',
    scope: {
      label: '@'
    },
    templateUrl: 'partials/checkbox.html',
    controller: function($scope){
      $scope.actionId = CryptoJS.MD5($scope.label).toString(CryptoJS.enc.Hex);
      console.log('labe', $scope.label);
      updateAction($scope.actionId, void 8);
      return $scope.$watch('v', function(it){
        console.log('value', it);
        console.log('scope', $scope);
        return updateAction($scope, $scope.actionId, it);
      });
    }
  };
});
app.directive('progressBar', function(){
  return {
    restrict: 'E',
    templateUrl: 'partials/progress_bar.html'
  };
});
app.controller('moltenCtrl', function($scope, storage){
  storage.bind($scope, 'actions');
  $scope.actions || ($scope.actions = {});
  $scope.registerAction = function(id){
    var varName, ref$;
    varName = id.replace("actions.", "");
    if (!$scope.actions[varName]) {
      return ref$ = $scope.actions, ref$[varName + ""] = void 8, ref$;
    }
  };
  $scope.$watch('actions', function(){
    var completed, k, v;
    completed = (function(){
      var ref$, results$ = [];
      for (k in ref$ = $scope.actions) {
        v = ref$[k];
        if (v && v !== "") {
          results$.push(k);
        }
      }
      return results$;
    }()).length;
    return $scope.percentage = completed / Object.keys($scope.actions).length * 100;
  }, true);
});